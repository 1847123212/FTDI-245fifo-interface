
module sync_fifo #(
    parameter ASIZE = 10
)(
    input  logic clk, rst_n,
    output logic [ASIZE-1:0] count,   // count the data in fifo
    output logic full_n, empty_n,
    input  logic winc,
    output logic wvalid,
    input  logic [15:0] wdata,
    input  logic rinc,
    output logic [ 7:0] rdata
);

logic  [ASIZE-1:0] wr_pt = 0;
logic  [ASIZE-1:0] rd_pt = 0;
logic  [ASIZE-1:0] rd_pt_next;
logic  rd_hl = 1'b0;
logic  rd_hl_next;
logic  [15:0] rd_data;

assign full_n  = ( rd_pt != (wr_pt+1) );
assign empty_n = ( rd_pt !=  wr_pt    ) && ( (rd_pt+1) !=  wr_pt    );
assign count = wr_pt - rd_pt;

assign wvalid = winc & full_n;

always @ (posedge clk or negedge rst_n)
    if(~rst_n) begin
        wr_pt <= 0;
    end else begin
        if(wvalid)
            wr_pt++;
    end
    
always @ (*) begin
    if(rinc & empty_n) begin
        if(rd_hl) begin
            rd_pt_next = rd_pt + 1;
            rd_hl_next = 1'b0;
        end else begin
            rd_pt_next = rd_pt;
            rd_hl_next = 1'b1;
        end
    end else begin
        rd_pt_next = rd_pt;
        rd_hl_next = rd_hl;
    end
end
    
always @ (posedge clk or negedge rst_n)
    if(~rst_n) begin
        rd_pt <= 0;
        rd_hl <= 1'b0;
    end else begin
        rd_pt <= rd_pt_next;
        rd_hl <= rd_hl_next;
    end
    
assign rdata = rd_hl ? rd_data[8+:8] : rd_data[0+:8];

ram #(
    .ADDR_LEN     ( ASIZE              ),
    .DATA_LEN     ( 16                 )
) ram_dual_port_for_sync_fifo_inst (
    .clk          ( clk                ),
    .wr_req       ( wvalid             ),
    .wr_addr      ( wr_pt              ),
    .wr_data      ( wdata              ),
    .rd_addr      ( rd_pt_next         ),
    .rd_data      ( rd_data            )
);

endmodule
